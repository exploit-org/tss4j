package org.exploit.threshield.frost.signature;

import org.exploit.threshield.curve.PointOps;
import org.exploit.threshield.frost.context.FrostContext;
import org.exploit.threshield.frost.model.ParticipantCommitment;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import static org.exploit.threshield.frost.hash.FrostHash.H1;
import static org.exploit.threshield.frost.hash.FrostHash.H2;

public class FrostPartialSignatureClient<P extends PointOps<P>> {
    private final FrostContext<P> context;

    public FrostPartialSignatureClient(FrostContext<P> context) {
        this.context = context;
    }

    public void storeCommitment(int idx, ParticipantCommitment<P> commitment) {
        context.commitment().storePeerCommitment(idx, commitment);
    }

    public PointOps<P> computeR() {
        var q = context.crypto().curve().getCurveOrder();
        var B = collectPeerCommitments();

        var R = context.crypto().curve().getInfinity();

        for (var pc : B) {
            var rho_j = H1(pc.idx(), context.message(), B, q);
            var term = pc.D().add(pc.E().mul(rho_j));
            R = R.add(term);
        }

        return R.normalize();
    }

    public BigInteger computeZ() {
        var q = context.crypto().curve().getCurveOrder();
        var idx = context.crypto().idx();
        var rho_i = H1(idx, context.message(), collectPeerCommitments(), q);

        var R = computeR();
        var c = H2(R, context.crypto().Y(), context.message(), q);

        var pair = context.commitment().pair();
        var d_i = pair.d();
        var e_i = pair.e();

        var lagrangeShare = context.crypto().lagrangeShare();

        return d_i.add(e_i.multiply(rho_i)).add(lagrangeShare.multiply(c)).mod(q);
    }

    public List<ParticipantCommitment<P>> collectPeerCommitments() {
        var peers = context.commitment().getPeerCommitments();

        List<ParticipantCommitment<P>> B = new ArrayList<>(peers.size() + 1);
        B.addAll(peers);

        B.sort(Comparator.comparingInt(ParticipantCommitment::idx));

        return B;
    }
}
