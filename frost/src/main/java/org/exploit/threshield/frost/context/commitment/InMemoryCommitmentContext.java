package org.exploit.threshield.frost.context.commitment;

import org.exploit.threshield.curve.PointOps;
import org.exploit.threshield.frost.model.CommitmentPair;
import org.exploit.threshield.frost.model.ParticipantCommitment;
import org.exploit.threshield.exception.IdentifiableAbortException;

import java.util.Collection;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class InMemoryCommitmentContext<P extends PointOps<P>> implements CommitmentContext<P> {
    private CommitmentPair<P> pair;
    private final Map<Integer, ParticipantCommitment<P>> peerCommitments = new ConcurrentHashMap<>();

    @Override
    public void storePeerCommitment(int idx, ParticipantCommitment<P> commitment) {
        peerCommitments.put(idx, commitment);
    }

    @Override
    public void setCommitmentPair(CommitmentPair<P> commitmentPair) {
        this.pair = commitmentPair;
    }

    @Override
    public CommitmentPair<P> pair() {
        return pair;
    }

    @Override
    public ParticipantCommitment<P> getCommitment(int idx) {
        var commitment = peerCommitments.get(idx);

        if (commitment == null)
            throw new IdentifiableAbortException(idx, "No commitment found ");

        return commitment;
    }

    @Override
    public Collection<ParticipantCommitment<P>> getPeerCommitments() {
        return peerCommitments.values();
    }
}
