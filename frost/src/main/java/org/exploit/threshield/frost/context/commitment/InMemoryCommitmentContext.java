package org.exploit.threshield.frost.context.commitment;

import com.google.common.collect.HashBasedTable;
import com.google.common.collect.Table;
import com.google.common.collect.Tables;
import org.exploit.threshield.curve.PointOps;
import org.exploit.threshield.frost.model.CommitmentPair;
import org.exploit.threshield.frost.model.ParticipantCommitment;
import org.exploit.threshield.exception.IdentifiableAbortException;

import java.util.Collection;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class InMemoryCommitmentContext<P extends PointOps<P>> implements CommitmentContext<P> {
    private final Map<String, CommitmentPair<P>> pair = new ConcurrentHashMap<>();
    private final Table<Integer, String, ParticipantCommitment<P>> peerCommitments = Tables.synchronizedTable(HashBasedTable.create());

    @Override
    public void storePeerCommitment(int idx, String opId, ParticipantCommitment<P> commitment) {
        peerCommitments.put(idx, opId, commitment);
    }

    @Override
    public void setCommitmentPair(String opId, CommitmentPair<P> commitmentPair) {
        pair.put(opId, commitmentPair);
    }

    @Override
    public CommitmentPair<P> pair(String opId) {
        return pair.get(opId);
    }

    @Override
    public ParticipantCommitment<P> getCommitment(int idx, String opId) {
        var commitment = peerCommitments.get(idx, opId);

        if (commitment == null)
            throw new IdentifiableAbortException(idx, "No commitment found for " + opId);

        return commitment;
    }

    @Override
    public Collection<ParticipantCommitment<P>> getPeerCommitments(String opId) {
        return peerCommitments.column(opId).values();
    }
}
