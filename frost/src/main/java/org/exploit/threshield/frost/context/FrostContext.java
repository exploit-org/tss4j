package org.exploit.threshield.frost.context;

import lombok.Builder;
import org.exploit.threshield.curve.PointOps;
import org.exploit.threshield.frost.context.commitment.CommitmentContext;
import org.exploit.threshield.frost.context.commitment.InMemoryCommitmentContext;
import org.exploit.threshield.frost.context.crypto.CryptoContext;
import org.exploit.threshield.frost.context.signature.InMemorySignatureAggregatorContext;
import org.exploit.threshield.frost.context.signature.SignatureAggregatorContext;

import java.util.Objects;

@Builder(builderMethodName = "newBuilder")
public final class FrostContext<P extends PointOps<P>> {
    private final byte[] message;
    private final CryptoContext<P> crypto;

    private CommitmentContext<P> commitment;
    private SignatureAggregatorContext aggregator;

    private FrostContext(byte[] message, CryptoContext<P> crypto, CommitmentContext<P> commitment, SignatureAggregatorContext aggregator) {
        this.message = message;
        this.commitment = commitment;
        this.crypto = crypto;
        this.aggregator = aggregator;
    }

    public byte[] message() {
        return message;
    }

    public CommitmentContext<P> commitment() {
        return commitment;
    }

    public CryptoContext<P> crypto() {
        return crypto;
    }

    public SignatureAggregatorContext aggregator() {
        return aggregator;
    }

    public static <P extends PointOps<P>> Builder<P> newBuilder(Class<P> ignore) {
        return new Builder<>();
    }

    public static class Builder<P extends PointOps<P>> {
        private byte[] message;
        private CryptoContext<P> crypto;

        private CommitmentContext<P> commitment = new InMemoryCommitmentContext<>();
        private SignatureAggregatorContext aggregator = new InMemorySignatureAggregatorContext();

        public Builder<P> message(byte[] message) {
            this.message = message;
            return this;
        }

        public Builder<P> crypto(CryptoContext<P> crypto) {
            this.crypto = crypto;
            return this;
        }

        public Builder<P> commitment(CommitmentContext<P> commitment) {
            this.commitment = commitment;
            return this;
        }

        public Builder<P> aggregator(SignatureAggregatorContext aggregator) {
            this.aggregator = aggregator;
            return this;
        }

        public FrostContext<P> build() {
            if (commitment == null)
                commitment = new InMemoryCommitmentContext<>();

            if (aggregator == null)
                aggregator = new InMemorySignatureAggregatorContext();

            return new FrostContext<>(
                Objects.requireNonNull(message),
                Objects.requireNonNull(crypto),
                commitment, aggregator
            );
        }
    }
}
