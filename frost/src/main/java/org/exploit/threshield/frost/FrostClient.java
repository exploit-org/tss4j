package org.exploit.threshield.frost;

import org.exploit.threshield.constant.ThresholdSignatureType;
import org.exploit.threshield.curve.PointOps;
import org.exploit.threshield.curve.ThresholdSessionClient;
import org.exploit.threshield.frost.aggregator.SignaturePartAggregator;
import org.exploit.threshield.frost.context.FrostContext;
import org.exploit.threshield.frost.preprocessor.FrostPreProcessor;
import org.exploit.threshield.frost.signature.FrostPartialSignatureClient;

import javax.security.auth.DestroyFailedException;

public class FrostClient<P extends PointOps<P>> implements ThresholdSessionClient {
    private final String sessionId;
    private final FrostContext<P> context;
    private final FrostPreProcessor<P> preProcessor;
    private final FrostPartialSignatureClient<P> signature;
    private final SignaturePartAggregator<P> aggregator;

    public FrostClient(String sessionId, FrostContext<P> context) {
        this.context = context;
        this.sessionId = sessionId;
        this.preProcessor = new FrostPreProcessor<>(context);
        this.signature = new FrostPartialSignatureClient<>(context);
        this.aggregator = new SignaturePartAggregator<>(context, signature);
    }

    @Override
    public ThresholdSignatureType type() {
        return ThresholdSignatureType.SCHNORR;
    }

    public String sessionId() {
        return sessionId;
    }

    public FrostPartialSignatureClient<P> signature() {
        return signature;
    }

    public FrostPreProcessor<P> preProcessor() {
        return preProcessor;
    }

    public SignaturePartAggregator<P> aggregator() {
        return aggregator;
    }

    public FrostContext<P> context() {
        return context;
    }

    @Override
    public void destroy() {
        context.destroy();
    }
}
