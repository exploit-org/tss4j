package org.exploit.threshield.frost.preprocessor;

import lombok.AllArgsConstructor;
import org.exploit.threshield.curve.PointOps;
import org.exploit.threshield.frost.context.FrostContext;
import org.exploit.threshield.frost.model.CommitmentPair;
import org.exploit.zktrust.util.ZKRandom;

import java.math.BigInteger;

@AllArgsConstructor
public class FrostPreProcessor<P extends PointOps<P>> {
    private final FrostContext<P> context;

    public CommitmentPair<P> generateCommitment(String opId) {
        var ecSpec = context.crypto().curve();

        var d = new BigInteger(ecSpec.getCurveOrder().bitLength(), ZKRandom.getRandom()).mod(ecSpec.getCurveOrder());
        var e = new BigInteger(ecSpec.getCurveOrder().bitLength(), ZKRandom.getRandom()).mod(ecSpec.getCurveOrder());

        var D = ecSpec.getG().mul(d).normalize();
        var E = ecSpec.getG().mul(e).normalize();

        var Y_i = context.crypto().curve().getG().mul(context.crypto().ski()).normalize();

        var pair = new CommitmentPair<>(d, e, D, E, Y_i);
        context.commitment().setCommitmentPair(opId, pair);
        context.commitment().storePeerCommitment(context.crypto().idx(), opId, pair.toParticipant(context.crypto().idx()));

        return pair;
    }
}
