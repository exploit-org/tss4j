package org.exploit.threshield.frost.hash;

import org.exploit.crypto.Hash;
import org.exploit.threshield.curve.PointOps;
import org.exploit.threshield.frost.model.ParticipantCommitment;
import org.exploit.threshield.exception.GenericAbortException;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;

public final class FrostHash {
    private FrostHash() {}

    public static <P extends PointOps<P>> BigInteger H1(int idx, byte[] msg, List<ParticipantCommitment<P>> B, BigInteger q) {
        try (var out = new ByteArrayOutputStream()) {
            out.write(idx);

            for (var pc : B) {
                out.write(pc.idx());
                out.write(pc.D().encode(true));
                out.write(pc.E().encode(true));
            }

            out.write(msg);

            return fromLittleEndian(Hash.sha512(out.toByteArray())).mod(q);
        } catch (IOException e) {
            throw new GenericAbortException(e);
        }
    }

    public static <P extends PointOps<P>> BigInteger H2(PointOps<P> R, PointOps<P> Y, byte[] msg, BigInteger q) {
        try (var out = new ByteArrayOutputStream()) {
            out.write(R.encode(true));
            out.write(Y.encode(true));
            out.write(msg);

            return fromLittleEndian(Hash.sha512(out.toByteArray())).mod(q);
        } catch (IOException e) {
            throw new GenericAbortException(e);
        }
    }

    private static BigInteger fromLittleEndian(byte[] bytes) {
        var reversed = Arrays.copyOf(bytes, bytes.length);

        for (int i = 0, j = bytes.length - 1; i < j; i++, j--) {
            var tmp = reversed[i];
            reversed[i] = reversed[j];
            reversed[j] = tmp;
        }

        return new BigInteger(1, reversed);
    }
}
