package org.exploit.threshield.ecdsa.context.crypto;

import lombok.AllArgsConstructor;
import org.exploit.threshield.curve.ec.WeierstrassCurveParams;
import org.exploit.threshield.curve.ec.WeierstrassPointOps;
import org.exploit.threshield.ecdsa.generator.CommitmentResult;
import org.exploit.threshield.pallier.Paillier;
import org.exploit.threshield.pallier.key.PaillierKeyPair;
import org.exploit.threshield.proof.model.ZKSetup;
import org.exploit.threshield.sodium.SecretBox;

import java.util.List;
import java.util.Objects;
import java.util.function.Supplier;

@AllArgsConstructor(access = lombok.AccessLevel.PRIVATE)
public class InMemoryCryptoContext<P extends WeierstrassPointOps<P>> implements CryptoContext<P> {
    private final int idx;
    private final SecretBox ski;
    private final PaillierKeyPair paillier;
    private final WeierstrassCurveParams<P> curve;
    private final List<Integer> participants;
    private final WeierstrassPointOps<P> publicKey;
    private final Supplier<byte[]> memKey;

    private CommitmentResult<P> commitment;
    private ZKSetup zkSetup;

    @Override
    public void setCommitment(CommitmentResult<P> commitment) {
        Objects.requireNonNull(commitment, "Commitment cannot be null");
        this.commitment = commitment;
    }

    @Override
    public boolean isInitialized() {
        return commitment != null;
    }

    @Override
    public int idx() {
        return idx;
    }

    @Override
    public SecretBox ski() {
        return ski;
    }

    @Override
    public Supplier<byte[]> memKey() {
        return memKey;
    }

    @Override
    public PaillierKeyPair paillier() {
        return paillier;
    }

    @Override
    public WeierstrassPointOps<P> publicKey() {
        return publicKey;
    }

    @Override
    public CommitmentResult<P> ephemeral() {
        return commitment;
    }

    @Override
    public ZKSetup zkSetup() {
        return zkSetup;
    }

    @Override
    public WeierstrassCurveParams<P> curve() {
        return curve;
    }

    @Override
    public List<Integer> participants() {
        return participants;
    }

    public static <P extends WeierstrassPointOps<P>> Builder<P> newBuilder() {
        return new Builder<>();
    }

    public static class Builder<P extends WeierstrassPointOps<P>> {
        private int idx;
        private PaillierKeyPair paillier;
        private CommitmentResult<P> commitment;
        private WeierstrassPointOps<P> publicKey;

        private ZKSetup zkSetup;
        private WeierstrassCurveParams<P> curve;
        private SecretBox ski;

        private List<Integer> participants;
        private Supplier<byte[]> memKey;

        public Builder<P> idx(int idx) {
            this.idx = idx;
            return this;
        }

        public Builder<P> paillier(PaillierKeyPair paillier) {
            this.paillier = paillier;
            return this;
        }

        public Builder<P> ski(SecretBox ski) {
            this.ski = ski;
            return this;
        }

        public Builder<P> publicKey(WeierstrassPointOps<P> publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        public Builder<P> participants(List<Integer> participants) {
            this.participants = participants;
            return this;
        }

        public Builder<P> commitment(CommitmentResult<P> commitment) {
            this.commitment = commitment;
            return this;
        }

        public Builder<P> memKey(Supplier<byte[]> memKey) {
            this.memKey = memKey;
            return this;
        }

        public Builder<P> zkSetup(ZKSetup zkSetup) {
            this.zkSetup = zkSetup;
            return this;
        }

        public Builder<P> curve(WeierstrassCurveParams<P> curve) {
            this.curve = curve;
            return this;
        }

        public InMemoryCryptoContext<P> build() {
            if (paillier == null)
                paillier = Paillier.generateKeyPair(3072);

            if (zkSetup == null)
                zkSetup = ZKSetup.generate(2048);

            Objects.requireNonNull(memKey, "Memory encryption key supplier cannot be null");
            Objects.requireNonNull(zkSetup, "ZKSetup cannot be null");
            Objects.requireNonNull(curve, "Curve cannot be null");
            Objects.requireNonNull(ski, "Secret key cannot be null");
            Objects.requireNonNull(publicKey, "Public key point cannot be null");

            if (participants == null || participants.isEmpty()) {
                throw new IllegalArgumentException("Participants cannot be null or empty");
            }

            return new InMemoryCryptoContext<>(idx, ski, paillier, curve, participants, publicKey, memKey, commitment, zkSetup);
        }
    }
}
