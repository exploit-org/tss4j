package org.exploit.threshield.ecdsa;

import org.exploit.threshield.curve.ThresholdSessionClient;
import org.exploit.threshield.constant.ThresholdSignatureType;
import org.exploit.threshield.ecdsa.aggregator.SignaturePartAggregator;
import org.exploit.threshield.ecdsa.context.GG20Context;
import org.exploit.threshield.ecdsa.generator.GG20CommitmentGenerator;
import org.exploit.threshield.ecdsa.integrity.IntegrityChecker;
import org.exploit.threshield.ecdsa.mta.MtAProtocolRunner;
import org.exploit.threshield.ecdsa.signature.PartialSignatureCalculator;

public class GG20Client implements ThresholdSessionClient {
    private final String sessionId;
    private final GG20Context context;
    private final MtAProtocolRunner mta;
    private final PartialSignatureCalculator signature;
    private final GG20CommitmentGenerator generator;
    private final IntegrityChecker integrity;
    private final SignaturePartAggregator aggregator;

    public GG20Client(String sessionId, GG20Context context, GG20CommitmentGenerator generator) {
        this.sessionId = sessionId;
        this.context = context;
        this.mta = new MtAProtocolRunner(context);
        this.signature = new PartialSignatureCalculator(context, this);
        this.generator = generator;
        this.integrity = new IntegrityChecker(context, this);
        this.aggregator = new SignaturePartAggregator(context, signature);
    }

    @Override
    public void init() {
        if (!context.crypto().isInitialized()) {
            var commitment = generator.createGammaCommitment();
            context.crypto().setCommitment(commitment);
        }

        if (!context.mta().initiator().isInitialized()) {
            mta.init();
        }
    }

    public GG20Context context() {
        return context;
    }

    public MtAProtocolRunner mta() {
        return mta;
    }

    public PartialSignatureCalculator signature() {
        return signature;
    }

    public GG20CommitmentGenerator generator() {
        return generator;
    }

    public IntegrityChecker integrity() {
        return integrity;
    }

    public SignaturePartAggregator aggregator() {
        return aggregator;
    }

    @Override
    public String sessionId() {
        return sessionId;
    }

    @Override
    public ThresholdSignatureType type() {
        return ThresholdSignatureType.ECDSA;
    }
}
