package org.exploit.threshield.ecdsa.integrity;

import org.exploit.threshield.curve.jce.ECPointOps;
import org.exploit.threshield.ecdsa.GG20Client;
import org.exploit.threshield.ecdsa.commitment.ChaumPedersonCommitment;
import org.exploit.threshield.ecdsa.commitment.ChaumPedersonCommitmentWithValue;
import org.exploit.threshield.ecdsa.context.GG20Context;
import org.exploit.threshield.exception.IdentifiableAbortException;

public class IntegrityChecker {
    private final GG20Context context;
    private final GG20Client client;

    public IntegrityChecker(GG20Context context, GG20Client client) {
        this.context = context;
        this.client = client;
    }

    public void storeSigmaCommitment(int peerId, ChaumPedersonCommitment commitment) {
        if (!client.generator().verifyChaumCommitment(commitment)) {
            throw new IdentifiableAbortException(peerId, "Invalid Sigma Commitment");
        }

        context.integrity().storeSigmaCommitment(peerId, commitment);
    }

    public void storeLambdaCommitment(int peerId, ChaumPedersonCommitmentWithValue commitmentWithValue) {
        if (!client.generator().verifyChaumCommitment(commitmentWithValue.commitment())) {
            throw new IdentifiableAbortException(peerId, "Invalid Lambda Commitment");
        }

        context.integrity().storeLambda(peerId, commitmentWithValue);
    }

    public ChaumPedersonCommitment computeSigmaCommitment() {
        var sigma = client.signature().computeSigmaShare();
        return client.generator().createChaumCommitment(sigma);
    }

    public ChaumPedersonCommitmentWithValue computeLambdaI() {
        var k_i = context.crypto().ephemeral().k_i();
        var point = context.crypto().curve().getG().mul(k_i).normalize();

        var commitment = client.generator().createChaumCommitment(k_i);
        return new ChaumPedersonCommitmentWithValue(commitment, point);
    }

    public ECPointOps computeLambdaProduct() {
        return context.integrity().computeLambdaProduct(computeLambdaI().value()).normalize();
    }
}
