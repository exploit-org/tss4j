package org.exploit.threshield.ecdsa.context.crypto;

import org.exploit.threshield.context.ShamirKeyContext;
import org.exploit.threshield.curve.ec.WeierstrassCurveParams;
import org.exploit.threshield.curve.ec.WeierstrassPointOps;
import org.exploit.threshield.ecdsa.generator.CommitmentResult;
import org.exploit.threshield.pallier.key.PaillierKeyPair;
import org.exploit.threshield.proof.model.ZKSetup;

public interface CryptoContext<P extends WeierstrassPointOps<P>> extends ShamirKeyContext<P> {
    @Override
    WeierstrassCurveParams<P> curve();

    PaillierKeyPair paillier();

    WeierstrassPointOps<P> publicKey();

    CommitmentResult<P> ephemeral();

    ZKSetup zkSetup();

    void setCommitment(CommitmentResult<P> commitment);

    boolean isInitialized();

    @SuppressWarnings("unused")
    static <P extends WeierstrassPointOps<P>> InMemoryCryptoContext.Builder<P> inMemoryBuilder(Class<P> clazz) {
        return InMemoryCryptoContext.newBuilder();
    }
}
