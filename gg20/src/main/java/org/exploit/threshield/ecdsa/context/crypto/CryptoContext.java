package org.exploit.threshield.ecdsa.context.crypto;

import org.exploit.threshield.context.ShamirKeyContext;
import org.exploit.threshield.curve.jce.ECPointOps;
import org.exploit.threshield.util.Polynomials;
import org.exploit.zktrust.cipher.key.PaillierKeyPair;
import org.exploit.zktrust.commitment.model.CommitmentResult;
import org.exploit.zktrust.proof.pallier.model.ZKSetup;

import java.math.BigInteger;

public interface CryptoContext extends ShamirKeyContext<ECPointOps> {
    PaillierKeyPair paillier();

    ECPointOps publicKey();

    CommitmentResult ephemeral();

    ZKSetup zkSetup();

    void setCommitment(CommitmentResult commitment);

    boolean isInitialized();

    default BigInteger lagrangeShare() {
        return Polynomials.lagrangeShare(ski(), idx(), participants(), curve().getCurveOrder());
    }
    static InMemoryCryptoContext.Builder inMemoryBuilder() {
        return InMemoryCryptoContext.newBuilder();
    }
}
