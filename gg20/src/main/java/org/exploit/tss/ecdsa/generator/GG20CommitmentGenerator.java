package org.exploit.tss.ecdsa.generator;

import org.exploit.gmp.BigInt;
import org.exploit.tss.commitment.PedersenCommitment;
import org.exploit.tss.curve.ec.WeierstrassPointOps;
import org.exploit.tss.ecdsa.commitment.ChaumPedersenCommitment;
import org.exploit.tss.util.ZKRandom;

public class GG20CommitmentGenerator<P extends WeierstrassPointOps<P>> {
    private final BigInt q;
    private final WeierstrassPointOps<P> g;
    private final WeierstrassPointOps<P> h;
    private final PedersenCommitment<P> pedersen;
    private final ChaumPedersenProofHandler<P> chaumPederson;

    public GG20CommitmentGenerator(BigInt q, WeierstrassPointOps<P> g, WeierstrassPointOps<P> h) {
        if (q.bitLength() < 256)
            throw new IllegalArgumentException("q must be at least 256 bits");

        this.q = q;
        this.g = g;
        this.h = h;
        this.pedersen = new PedersenCommitment<>(g, h, q);
        this.chaumPederson = new ChaumPedersenProofHandler<>(q, g, h);
    }

    public CommitmentResult<P> createGammaCommitment() {
        var k_i = new BigInt(q.bitLength(), ZKRandom.getRandom()).mod(q);
        var gamma_i = new BigInt(q.bitLength(), ZKRandom.getRandom()).mod(q);
        var Gamma_i = g.mul(gamma_i).normalize();

        var r_i = new BigInt(q.bitLength(), ZKRandom.getRandom()).mod(q);
        var C_i = pedersen.commit(Gamma_i.getAffineX(), r_i);

        return new CommitmentResult<>((WeierstrassPointOps<P>) C_i, Gamma_i, r_i, k_i, gamma_i);
    }

    public boolean verifyGammaCommitment(WeierstrassPointOps<P> C_i, WeierstrassPointOps<P> Gamma_i, BigInt r_i) {
        return pedersen.verify(C_i, Gamma_i.getAffineX(), r_i);
    }

    public ChaumPedersenCommitment<P> createChaumCommitment(BigInt value) {
        var rnd = ZKRandom.getRandom();

        var t = new BigInt(q.bitLength(), rnd).mod(q);
        var T = g.mul(value).add(h.mul(t)).normalize();

        var proof = chaumPederson.generateProof(value, t, T);
        return new ChaumPedersenCommitment<>(T, proof);
    }

    public boolean verifyChaumCommitment(ChaumPedersenCommitment<P> commitment) {
        return chaumPederson.verifyChaumCommitment(commitment);
    }
}