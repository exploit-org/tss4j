package org.exploit.tss.ecdsa;

import org.exploit.tss.constant.ThresholdSignatureType;
import org.exploit.tss.curve.ThresholdSessionClient;
import org.exploit.tss.curve.ec.WeierstrassPointOps;
import org.exploit.tss.ecdsa.aggregator.SignaturePartAggregator;
import org.exploit.tss.ecdsa.context.GG20Context;
import org.exploit.tss.ecdsa.generator.GG20CommitmentGenerator;
import org.exploit.tss.ecdsa.integrity.IntegrityChecker;
import org.exploit.tss.ecdsa.mta.MtAProtocolRunner;
import org.exploit.tss.ecdsa.signature.PartialSignatureCalculator;

public class GG20Client<P extends WeierstrassPointOps<P>> implements ThresholdSessionClient {
    private final String sessionId;
    private final GG20Context<P> context;
    private final MtAProtocolRunner<P> mta;
    private final PartialSignatureCalculator<P> signature;
    private final GG20CommitmentGenerator<P> generator;
    private final IntegrityChecker<P> integrity;
    private final SignaturePartAggregator<P> aggregator;

    public GG20Client(String sessionId, GG20Context<P> context, GG20CommitmentGenerator<P> generator) {
        this.sessionId = sessionId;
        this.context = context;
        this.mta = new MtAProtocolRunner<>(context);
        this.signature = new PartialSignatureCalculator<>(context, this);
        this.generator = generator;
        this.integrity = new IntegrityChecker<>(context, this);
        this.aggregator = new SignaturePartAggregator<>(context, signature);
    }

    @Override
    public void init() {
        if (!context.crypto().isInitialized()) {
            var commitment = generator.createGammaCommitment();
            context.crypto().setCommitment(commitment);
        }

        if (!context.mta().initiator().isInitialized()) {
            mta.init();
        }
    }

    public GG20Context<P> context() {
        return context;
    }

    public MtAProtocolRunner<P> mta() {
        return mta;
    }

    public PartialSignatureCalculator<P> signature() {
        return signature;
    }

    public GG20CommitmentGenerator<P> generator() {
        return generator;
    }

    public IntegrityChecker<P> integrity() {
        return integrity;
    }

    public SignaturePartAggregator<P> aggregator() {
        return aggregator;
    }

    @Override
    public String sessionId() {
        return sessionId;
    }

    @Override
    public ThresholdSignatureType type() {
        return ThresholdSignatureType.ECDSA;
    }
}
