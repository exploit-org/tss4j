package org.exploit.tss.ecdsa.context.signature;

import org.exploit.gmp.BigInt;
import org.exploit.tss.curve.ec.WeierstrassPointOps;
import org.exploit.tss.util.Sum;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class InMemorySignatureContext<P extends WeierstrassPointOps<P>> implements SignatureContext<P> {
    private final Map<Integer, WeierstrassPointOps<P>> gammas = new ConcurrentHashMap<>();
    private final Map<Integer, BigInt> deltas = new ConcurrentHashMap<>();

    @Override
    public void storeGamma(int peerId, WeierstrassPointOps<P> gamma) {
        gammas.put(peerId, gamma);
    }

    @Override
    public void storeDeltaShare(int peerId, BigInt deltaShare) {
        deltas.put(peerId, deltaShare);
    }

    @Override
    public WeierstrassPointOps<P> computeGammaProduct(WeierstrassPointOps<P> clientGamma) {
        var product = clientGamma;

        for (var gamma : gammas.values()) {
            product = product.add((P) gamma);
        }

        return product.normalize();
    }

    @Override
    public BigInt computeDeltaSum(BigInt deltaShare, BigInt q) {
        return Sum.modSum(deltaShare, q, deltas.values());
    }
}
