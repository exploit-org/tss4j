package org.exploit.tss.ecdsa.generator;

import org.exploit.gmp.BigInt;
import org.exploit.tss.curve.ec.WeierstrassPointOps;
import org.exploit.tss.ecdsa.commitment.ChaumPedersenCommitment;
import org.exploit.tss.proof.model.ChaumPedersenProof;
import org.exploit.tss.proof.model.context.ChaumPedersenContext;
import org.exploit.tss.proof.pedersen.ChaumPedersenProofGenerator;
import org.exploit.tss.proof.pedersen.ChaumPedersenProofValidator;

public class ChaumPedersenProofHandler<P extends WeierstrassPointOps<P>> {
    private final ChaumPedersenProofGenerator<P> generator;
    private final ChaumPedersenProofValidator<P> validator;

    public ChaumPedersenProofHandler(BigInt q, WeierstrassPointOps<P> g, WeierstrassPointOps<P> h) {
        this.generator = new ChaumPedersenProofGenerator<>(q, g, h);
        this.validator = new ChaumPedersenProofValidator<>(q, g, h);
    }

    public boolean verifyChaumCommitment(ChaumPedersenCommitment<P> commitment) {
        var T = commitment.T();
        var proof = commitment.proof();

        return validator.verifyProof(proof, T, null);
    }

    public ChaumPedersenProof<P> generateProof(BigInt sigma, BigInt t, WeierstrassPointOps<P> T) {
        var context = new ChaumPedersenContext<>(t, T);
        return generator.createProof(sigma, context);
    }
}
