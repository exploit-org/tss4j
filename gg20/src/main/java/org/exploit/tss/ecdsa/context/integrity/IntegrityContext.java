package org.exploit.tss.ecdsa.context.integrity;

import org.exploit.tss.curve.PointOps;
import org.exploit.tss.curve.ec.WeierstrassPointOps;
import org.exploit.tss.ecdsa.commitment.ChaumPedersenCommitment;
import org.exploit.tss.ecdsa.commitment.ChaumPedersenCommitmentWithValue;
import org.exploit.tss.ecdsa.commitment.GammaCommitment;

public interface IntegrityContext<P extends WeierstrassPointOps<P>> {
    void storeLambda(int peerId, ChaumPedersenCommitmentWithValue<P> lambda);

    void storeGammaCommitment(int peerId, GammaCommitment<P> gammaCommitment);

    void storeSigmaCommitment(int peerId, ChaumPedersenCommitment<P> sigmaCommitment);

    GammaCommitment<P> getGammaCommitment(int peerId);

    ChaumPedersenCommitment<P> getSigmaCommitment(int peerId);

    PointOps<P> computeLambdaProduct(PointOps<P> clientLambda);
}
