package org.exploit.tss.ecdsa.context;

import lombok.AllArgsConstructor;
import lombok.RequiredArgsConstructor;
import org.exploit.tss.curve.ec.WeierstrassPointOps;
import org.exploit.tss.ecdsa.context.aggregator.InMemoryAggregatorContext;
import org.exploit.tss.ecdsa.context.aggregator.SignatureAggregatorContext;
import org.exploit.tss.ecdsa.context.crypto.CryptoContext;
import org.exploit.tss.ecdsa.context.init.InitContext;
import org.exploit.tss.ecdsa.context.integrity.InMemoryIntegrityContext;
import org.exploit.tss.ecdsa.context.integrity.IntegrityContext;
import org.exploit.tss.ecdsa.context.mta.MtAContext;
import org.exploit.tss.ecdsa.context.mta.initiator.MtAInitiatorContext;
import org.exploit.tss.ecdsa.context.mta.respondent.MtARespondentContext;
import org.exploit.tss.ecdsa.context.signature.InMemorySignatureContext;
import org.exploit.tss.ecdsa.context.signature.SignatureContext;

import javax.security.auth.Destroyable;
import java.util.Objects;

@AllArgsConstructor(access = lombok.AccessLevel.PRIVATE)
public class GG20Context<P extends WeierstrassPointOps<P>> implements Destroyable {
    private final InitContext init;
    private final MtAContext mta;
    private final CryptoContext<P> crypto;
    private final SignatureContext<P> signature;
    private final IntegrityContext<P> integrity;
    private final SignatureAggregatorContext aggregator;

    public InitContext init() {
        return init;
    }

    public MtAContext mta() {
        return mta;
    }

    public SignatureContext<P> signature() {
        return signature;
    }

    public IntegrityContext<P> integrity() {
        return integrity;
    }

    public CryptoContext<P> crypto() {
        return crypto;
    }

    public SignatureAggregatorContext aggregator() {
        return aggregator;
    }

    public static <P extends WeierstrassPointOps<P>> ContextBuilder<P> newBuilder(Class<P> clazz) {
        return new ContextBuilder<>();
    }

    @Override
    public void destroy() {
        crypto.destroy();
    }

    @RequiredArgsConstructor
    public static class ContextBuilder<P extends WeierstrassPointOps<P>> {
        private InitContext init;
        private CryptoContext<P> crypto;
        private MtAContext mta = new MtAContext(MtAInitiatorContext.inMemory(), MtARespondentContext.inMemory());
        private SignatureContext<P> signature = new InMemorySignatureContext<>();
        private IntegrityContext<P> integrity = new InMemoryIntegrityContext<>();
        private SignatureAggregatorContext aggregator = new InMemoryAggregatorContext();

        public ContextBuilder<P> init(InitContext init) {
            this.init = init;
            return this;
        }

        public ContextBuilder<P> mta(MtAContext mta) {
            this.mta = mta;
            return this;
        }

        public ContextBuilder<P> crypto(CryptoContext<P> crypto) {
            this.crypto = crypto;
            return this;
        }

        public ContextBuilder<P> signature(SignatureContext<P> signature) {
            this.signature = signature;
            return this;
        }

        public ContextBuilder<P> integrity(IntegrityContext<P> integrity) {
            this.integrity = integrity;
            return this;
        }

        public ContextBuilder<P> aggregator(SignatureAggregatorContext aggregator) {
            this.aggregator = aggregator;
            return this;
        }

        public GG20Context<P> build() {
            Objects.requireNonNull(init, "InitContext cannot be null");
            Objects.requireNonNull(mta, "MtAContext cannot be null");
            Objects.requireNonNull(crypto, "CryptoContext cannot be null");

            return new GG20Context<>(init, mta, crypto, signature, integrity, aggregator);
        }
    }
}
