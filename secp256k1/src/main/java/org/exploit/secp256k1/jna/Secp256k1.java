package org.exploit.secp256k1.jna;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import org.bouncycastle.util.encoders.Hex;
import org.exploit.secp256k1.Secp256k1PointOps;

public interface Secp256k1 extends Library {
    Secp256k1 INSTANCE = Native.load("secp256k1", Secp256k1.class);

    Secp256k1PointOps GENERATOR_H = new Secp256k1PointOps(Hex.decode("0350929B74C1A04954B78B4B6035E97A5E078A5A0F28EC96D547BFEE9ACE803AC0"));

    int SECP256K1_FLAGS_TYPE_CONTEXT = 1;
    int SECP256K1_FLAGS_TYPE_COMPRESSION = 1 << 1;
    int SECP256K1_FLAGS_BIT_CONTEXT_VERIFY = 1 << 8;
    int SECP256K1_FLAGS_BIT_CONTEXT_SIGN = 1 << 9;
    int SECP256K1_FLAGS_BIT_COMPRESSION = 1 << 8;

    int SECP256K1_CONTEXT_NONE  = SECP256K1_FLAGS_TYPE_CONTEXT;
    int SECP256K1_CONTEXT_VERIFY = SECP256K1_FLAGS_TYPE_CONTEXT | SECP256K1_FLAGS_BIT_CONTEXT_VERIFY;
    int SECP256K1_CONTEXT_SIGN = SECP256K1_FLAGS_TYPE_CONTEXT | SECP256K1_FLAGS_BIT_CONTEXT_SIGN;
    int SECP256K1_CONTEXT_SIGN_VERIFY = SECP256K1_CONTEXT_VERIFY | SECP256K1_CONTEXT_SIGN;

    int SECP256K1_EC_UNCOMPRESSED = SECP256K1_FLAGS_TYPE_COMPRESSION;
    int SECP256K1_EC_COMPRESSED = SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION;

    long secp256k1_context_create(int flags);
    void secp256k1_context_destroy(long ctx);

    int secp256k1_ecdsa_recoverable_signature_parse_compact(long ctx, byte[] sig, byte[] input64, int recid);

    int secp256k1_ecdsa_recoverable_signature_serialize_compact(long ctx, byte[] output64, int[] recid, byte[] sig);

    int secp256k1_ecdsa_recover(long ctx, byte[] pubkey, byte[] sig, byte[] msg32);
    int secp256k1_ec_pubkey_parse(long ctx, byte[] pubkey, byte[] input, long inputlen);
    int secp256k1_ec_pubkey_serialize(long ctx, byte[] output, long[] outputlen, byte[] pubkey, int flags);
    int secp256k1_ec_pubkey_combine(long ctx, byte[] output, Pointer[] inputPubkeyPtrs, long nPubkeys);

    int secp256k1_ec_pubkey_negate(long ctx, byte[] pubkey);
    int secp256k1_ec_pubkey_tweak_mul(long ctx, byte[] pubkey, byte[] tweak32);
    int secp256k1_ec_pubkey_create(long ctx, byte[] output, byte[] seckey32);
}