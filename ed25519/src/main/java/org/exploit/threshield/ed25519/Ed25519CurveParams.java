package org.exploit.threshield.ed25519;

import org.exploit.gmp.BigInt;
import org.exploit.threshield.curve.EllipticCurveParams;
import org.exploit.threshield.sodium.Sodium;

import java.util.Objects;

import static org.exploit.threshield.util.Endian.toLittleEndian;

public class Ed25519CurveParams implements EllipticCurveParams<Ed25519PointOps> {
    public static final BigInt CURVE_ORDER = new BigInt(
        "7237005577332262213973186563042994240857116359379907606001950938285454250989", 10
    );

    public static final BigInt FIELD_P = BigInt.TWO.pow(255).subtract(BigInt.valueOf(19));

    @Override
    public Ed25519PointOps getG() {
        return Ed25519PointOps.baseMulUnclamped(BigInt.ONE);
    }

    @Override
    public BigInt getCurveOrder() {
        return CURVE_ORDER;
    }

    @Override
    public Ed25519PointOps getInfinity() {
        return createPoint(BigInt.ZERO, BigInt.ONE);
    }

    @Override
    public Ed25519PointOps createPoint(BigInt x, BigInt y) {
        var yMod = y.mod(FIELD_P);
        var yBytes = toLittleEndian(yMod, Sodium.crypto_core_ed25519_BYTES);

        if (x.testBit(0)) {
            yBytes[Sodium.crypto_core_ed25519_BYTES - 1] |= 0x80;
        } else {
            yBytes[Sodium.crypto_core_ed25519_BYTES - 1] &= 0x7F;
        }

        return new Ed25519PointOps(yBytes);
    }

    @Override
    public Ed25519PointOps decodePoint(byte[] bytes) {
        if (Objects.requireNonNull(bytes).length != Sodium.crypto_core_ed25519_BYTES)
            throw new IllegalArgumentException("Unexpected Ed25519 point length: " + bytes.length);

        if (Sodium.INSTANCE.crypto_core_ed25519_is_valid_point(bytes) != 1)
            throw new IllegalArgumentException("Invalid Ed25519 point encoding");

        return new Ed25519PointOps(bytes.clone());
    }
}
