package org.exploit.threshield.ed25519;

import org.exploit.threshield.ed25519.jna.Sodium;
import org.exploit.threshield.curve.EllipticCurveParams;
import org.exploit.threshield.curve.PointOps;

import java.math.BigInteger;

import static org.exploit.threshield.util.Endian.toLittleEndian;

public class Ed25519CurveParams implements EllipticCurveParams<Ed25519PointOps> {
    public static final BigInteger CURVE_ORDER = new BigInteger(
        "7237005577332262213973186563042994240857116359379907606001950938285454250989"
    );

    public static final BigInteger FIELD_P = BigInteger.valueOf(2).pow(255).subtract(BigInteger.valueOf(19));

    @Override
    public PointOps<Ed25519PointOps> getG() {
        return Ed25519PointOps.baseMulUnclamped(BigInteger.ONE);
    }

    @Override
    public BigInteger getCurveOrder() {
        return CURVE_ORDER;
    }

    @Override
    public PointOps<Ed25519PointOps> getInfinity() {
        return createPoint(BigInteger.ZERO, BigInteger.ONE);
    }

    @Override
    public PointOps<Ed25519PointOps> createPoint(BigInteger x, BigInteger y) {
        var yMod = y.mod(FIELD_P);
        var yBytes = toLittleEndian(yMod, Sodium.crypto_core_ed25519_BYTES);

        if (x.testBit(0)) {
            yBytes[Sodium.crypto_core_ed25519_BYTES - 1] |= 0x80;
        } else {
            yBytes[Sodium.crypto_core_ed25519_BYTES - 1] &= 0x7F;
        }

        return new Ed25519PointOps(yBytes);
    }
}
