package org.exploit.threshield.sodium;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Pointer;

public interface Sodium extends Library {
    Sodium INSTANCE = Native.load("sodium", Sodium.class);

    int sodium_init();

    int crypto_core_ed25519_BYTES = 32;
    int crypto_core_ed25519_UNIFORMBYTES = 64;
    int crypto_core_ed25519_SCALARBYTES = 32;
    int crypto_core_ed25519_NONREDUCEDSCALARBYTES = 64;
    int crypto_scalarmult_ed25519_BYTES = 32;
    int crypto_scalarmult_ed25519_SCALARBYTES = 32;

    int crypto_core_ed25519_add(byte[] r, byte[] p, byte[] q);

    int crypto_core_ed25519_sub(byte[] r, byte[] p, byte[] q);

    int crypto_core_ed25519_is_valid_point(byte[] p);
    void crypto_core_ed25519_random(byte[] p);
    int crypto_core_ed25519_from_uniform(byte[] p, byte[] uniform);

    int crypto_scalarmult_ed25519(byte[] q, byte[] scalar, byte[] p);

    int crypto_scalarmult_ed25519_base(byte[] q, byte[] scalar);

    int crypto_scalarmult_ed25519_noclamp(byte[] q, byte[] scalar, byte[] p);
    int crypto_scalarmult_ed25519_base_noclamp(byte[] q, byte[] scalar);

    void crypto_core_ed25519_scalar_random(byte[] r);
    void crypto_core_ed25519_scalar_reduce(byte[] r, byte[] s);

    int crypto_core_ed25519_scalar_invert(byte[] recip, byte[] s);

    void crypto_core_ed25519_scalar_negate(byte[] neg, byte[] s);

    void crypto_core_ed25519_scalar_complement(byte[] comp, byte[] s);

    void crypto_core_ed25519_scalar_add(byte[] z, byte[] x, byte[] y);

    void crypto_core_ed25519_scalar_sub(byte[] z, byte[] x, byte[] y);

    void crypto_core_ed25519_scalar_mul(byte[] z, byte[] x, byte[] y);

    Pointer sodium_malloc(long size);

    void sodium_free(Pointer ptr);

    int sodium_mlock(Pointer ptr, long len);
    int sodium_munlock(Pointer ptr, long len);

    void sodium_memzero(Pointer ptr, long len);

    void randombytes_buf(byte[] buf, long size);

    int crypto_secretbox_KEYBYTES = 32;
    int crypto_secretbox_NONCEBYTES = 24;
    int crypto_secretbox_MACBYTES = 16;

    int crypto_secretbox_easy(
        byte[] c, byte[] m, long mlen,
        byte[] nonce, byte[] key
    );
    int crypto_secretbox_open_easy(
        byte[] m, byte[] c, long clen,
        byte[] nonce, byte[] key
    );
}