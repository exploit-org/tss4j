package org.exploit.sodium;

import com.sun.jna.Pointer;

import java.lang.ref.Cleaner;
import java.nio.ByteBuffer;
import java.util.Arrays;

public final class ReadOnlyBuffer implements AutoCloseable {
    private final Pointer ptr;
    private final int len;
    private final Cleaner.Cleanable cleanable;
    private volatile boolean closed = false;

    private static final Cleaner cleaner = Cleaner.create();
    private static final Sodium S = Sodium.INSTANCE;

    private static final class State implements Runnable {
        private final Pointer p;

        State(Pointer p) {
            this.p = p;
        }

        @Override
        public void run() {
            S.sodium_free(p);
        }
    }

    public ReadOnlyBuffer(byte[] src) {
        this.len = src.length;
        this.ptr = S.sodium_malloc(len);

        if (ptr == null)
            throw new OutOfMemoryError("sodium_malloc NULL");

        S.sodium_mlock(ptr, len);
        ptr.write(0, src, 0, len);
        Arrays.fill(src, (byte) 0);

        S.sodium_mprotect_readonly(ptr);
        this.cleanable = cleaner.register(this, new State(ptr));
    }

    public byte[] read() {
        ensureOpen();
        var out = new byte[len];
        ptr.read(0, out, 0, len);

        return out;
    }

    public ByteBuffer asReadOnlyByteBuffer() {
        ensureOpen();
        return ptr.getByteBuffer(0, len).asReadOnlyBuffer();
    }

    @Override
    public void close() {
        if (closed) return;
        closed = true;
        cleanable.clean();
    }

    private void ensureOpen() {
        if (closed) throw new IllegalStateException("Buffer closed");
    }
}