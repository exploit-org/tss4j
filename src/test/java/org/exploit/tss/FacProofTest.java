package org.exploit.tss;

import org.exploit.tss.pallier.Paillier;
import org.exploit.tss.proof.model.NoSmallFactorProof;
import org.exploit.tss.proof.model.ZKSetup;
import org.exploit.tss.proof.paillier.NoSmallFactorProofGenerator;
import org.exploit.tss.proof.paillier.NoSmallFactorProofValidator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;

import java.security.SecureRandom;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class FacProofTest {
    private static final SecureRandom RND = new SecureRandom();

    @BeforeEach
    public void setUp() {
        TSS.loadLibraries();
    }

    @RepeatedTest(64)
    public void facProofPasses() {
        var keyPair = Paillier.generateKeyPair(3072);
        var priv = keyPair.privateKey();
        var pub = keyPair.publicKey();

        var zk = ZKSetup.generate(3072);
        var ctx = nonce();

        var gen = new NoSmallFactorProofGenerator(zk, 256, 16);
        var proof = gen.createProof(priv, ctx);

        var val = new NoSmallFactorProofValidator(zk, 256, 16);
        assertTrue(val.verifyProof(proof, pub, ctx));
    }

    @Test
    public void facProofFailsOnTamper() {
        var keyPair = Paillier.generateKeyPair(3072);
        var priv = keyPair.privateKey();
        var pub = keyPair.publicKey();

        var zk = ZKSetup.generate(3072);
        var ctx = nonce();

        var gen = new NoSmallFactorProofGenerator(zk, 256, 16);
        var proof = gen.createProof(priv, ctx);

        var badA = proof.A().clone();
        badA[badA.length - 1] ^= 1;

        var bad = new NoSmallFactorProof(
                proof.P(), proof.Q(), badA, proof.B(), proof.T(),
                proof.z1(), proof.z2(), proof.w1(), proof.w2(), proof.v()
        );

        var val = new NoSmallFactorProofValidator(zk, 256, 16);
        assertFalse(val.verifyProof(bad, pub, ctx));
    }

    @Test
    public void facProofFailsOnWrongContext() {
        var keyPair = Paillier.generateKeyPair(3072);
        var priv = keyPair.privateKey();
        var pub = keyPair.publicKey();

        var zk = ZKSetup.generate(3072);

        var ctx = nonce();
        var other = nonce();

        var proof = new NoSmallFactorProofGenerator(zk, 256, 16).createProof(priv, ctx);
        assertFalse(new NoSmallFactorProofValidator(zk, 256, 16).verifyProof(proof, pub, other));
    }

    private static byte[] nonce() {
        var b = new byte[32];
        RND.nextBytes(b);
        return b;
    }
}