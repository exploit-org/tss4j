package org.exploit.threshield.tests;

import org.bouncycastle.jce.ECNamedCurveTable;
import org.bouncycastle.math.ec.ECPoint;
import org.exploit.threshield.ecdsa.generator.GG20CommitmentGenerator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigInteger;
import java.security.SecureRandom;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class GG20CommitmentTest {
    private BigInteger q;
    private ECPoint g;
    private GG20CommitmentGenerator generator;

    @BeforeEach
    public void setUp() {
        var ecSpec = ECNamedCurveTable.getParameterSpec("secp256k1");

        q = ecSpec.getN();
        g = ecSpec.getG();

        var scalar = new BigInteger(q.bitLength(), new SecureRandom()).mod(q);
        var h = g.multiply(scalar).normalize();

        generator = new GG20CommitmentGenerator(q, g, h);
    }

    @Test
    public void testSuccessfulVerification() {
        var result = generator.createGammaCommitment();
        var isValid = generator.verifyGammaCommitment(result.commitment(), result.Gamma_i(), result.r_i());

        assertTrue(isValid);
    }

    @Test
    public void testVerificationWithIncorrectGamma() {
        var result = generator.createGammaCommitment();
        var wrongGamma = result.gamma_i().add(BigInteger.ONE).mod(q);
        var wrongGamma_i = g.multiply(wrongGamma).normalize();
        var isValid = generator.verifyGammaCommitment(result.commitment(), wrongGamma_i, result.r_i());

        assertFalse(isValid);
    }

    @Test
    public void testVerificationWithIncorrectR() {
        var result = generator.createGammaCommitment();
        var wrongR = result.r_i().add(BigInteger.ONE).mod(q);
        var isValid = generator.verifyGammaCommitment(result.commitment(), result.Gamma_i(), wrongR);

        assertFalse(isValid);
    }
}