package org.exploit.threshield.curve.jce;

import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.math.ec.ECPoint;
import org.exploit.threshield.curve.PointOps;

import java.math.BigInteger;

public final class ECPointOps implements PointOps<ECPointOps> {
    private final ECPoint p;

    public ECPointOps(ECPoint p) {
        this.p = p;
    }

    @Override
    public ECPointOps add(ECPointOps q) {
        return new ECPointOps(p.add(q.p));
    }

    @Override
    public ECPointOps dbl() {
        return new ECPointOps(p.twice());
    }

    @Override
    public ECPointOps mul(BigInteger k) {
        return new ECPointOps(p.multiply(k));
    }

    @Override
    public ECPointOps sub(ECPointOps q) {
        return new ECPointOps(p.subtract(q.p));
    }

    @Override
    public ECPointOps normalize() {
        return new ECPointOps(p.normalize());
    }

    @Override
    public ECPointOps negate() {
        return new ECPointOps(this.p.negate());
    }

    @Override
    public boolean isValid() {
        return p.isValid();
    }

    @Override
    public byte[] encode(boolean c) {
        return p.getEncoded(c);
    }

    public BigInteger getX() {
        return p.normalize().getAffineXCoord().toBigInteger();
    }

    public BigInteger getY() {
        return p.normalize().getAffineYCoord().toBigInteger();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ECPointOps that = (ECPointOps) obj;
        return p.equals(that.p);
    }

    @Override
    public int hashCode() {
        return p.hashCode();
    }

    public static ECPointOps fromAffine(X9ECParameters params, BigInteger x, BigInteger y) {
        return new ECPointOps(params.getCurve().createPoint(x, y));
    }
}