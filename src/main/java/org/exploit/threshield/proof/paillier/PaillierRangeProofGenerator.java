package org.exploit.threshield.proof.paillier;

import at.favre.lib.bytes.Bytes;
import org.exploit.crypto.Hash;
import org.exploit.gmp.BigInt;
import org.exploit.threshield.proof.ZKProofGenerator;
import org.exploit.threshield.proof.model.PaillierRangeProof;
import org.exploit.threshield.proof.model.witness.PaillierRangeEncryptionWitness;
import org.exploit.threshield.util.ZKRandom;

public class PaillierRangeProofGenerator implements ZKProofGenerator<PaillierRangeProof, PaillierRangeEncryptionWitness, byte[]> {
    @Override
    public PaillierRangeProof createProof(PaillierRangeEncryptionWitness witness, byte[] context) {
        var pubKey = witness.publicKey();
        var zkSetup = witness.zk();

        var g = pubKey.g();
        var n = pubKey.n();
        var nsq = pubKey.nsquare();
        var hatN = zkSetup.hatN();
        var h1 = zkSetup.h1();
        var h2 = zkSetup.h2();

        var q = witness.q();
        var q2 = q.pow(2);

        var alpha = new BigInt(q2.bitLength(), ZKRandom.getRandom()).mod(q2);
        var beta = new BigInt(n.bitLength(), ZKRandom.getRandom()).mod(n);
        var gamma = new BigInt(q2.multiply(hatN).bitLength(), ZKRandom.getRandom()).mod(q2.multiply(hatN));
        var rho = new BigInt(q.multiply(hatN).bitLength(), ZKRandom.getRandom()).mod(q.multiply(hatN));

        var z = h1.modPow(witness.m(), hatN).multiply(h2.modPow(rho, hatN)).mod(hatN);
        var u = g.modPow(alpha, nsq).multiply(beta.modPow(n, nsq)).mod(nsq);

        var w = h1.modPow(alpha, hatN).multiply(h2.modPow(gamma, hatN)).mod(hatN);

        var hashInput = Bytes.from(
                witness.c().toByteArray(),
                z.toByteArray(),
                u.toByteArray(),
                w.toByteArray(),
                context
        ).array();

        var e = new BigInt(1, Hash.sha256(hashInput)).mod(q);

        var s = witness.r().modPow( e, n).multiply(beta).mod(n);
        var s1 = e.multiply(witness.m()).add(alpha);
        var s2 = e.multiply(rho).add(gamma);

        return new PaillierRangeProof(
            z.toByteArray(), u.toByteArray(),
            w.toByteArray(), s.toByteArray(),
            s1, s2
        );
    }
}