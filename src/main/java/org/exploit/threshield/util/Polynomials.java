package org.exploit.threshield.util;

import java.math.BigInteger;
import java.util.HashSet;
import java.util.List;

public final class Polynomials {
    private Polynomials() {}

    public static BigInteger lagrangeShare(BigInteger sk_i, int i, List<Integer> participants, BigInteger q) {
        validateParameters(sk_i, i, participants, q);
        var lambda_i = computeLagrangeCoefficient(i, participants, q);

        return sk_i.multiply(lambda_i).mod(q);
    }

    private static BigInteger computeLagrangeCoefficient(int i, List<Integer> participants, BigInteger q) {
        var numerator = BigInteger.ONE;
        var denominator = BigInteger.ONE;
        var bigI = BigInteger.valueOf(i);

        for (int j : participants) {
            if (j == i) {
                continue;
            }
            var bigJ = BigInteger.valueOf(j);
            numerator = numerator.multiply(bigJ).mod(q);
            denominator = denominator.multiply(bigJ.subtract(bigI).mod(q)).mod(q);
        }

        var denomInverse = denominator.modInverse(q);

        return numerator.multiply(denomInverse).mod(q);
    }

    private static void validateParameters(BigInteger sk_i, int i, List<Integer> participants, BigInteger q) {
        if (sk_i == null) {
            throw new IllegalArgumentException("Share sk_i should not be null");
        }
        if (q == null || q.compareTo(BigInteger.ONE) <= 0) {
            throw new IllegalArgumentException("Group order q should be greater than 1");
        }
        if (sk_i.signum() < 0 || sk_i.compareTo(q) >= 0) {
            throw new IllegalArgumentException("Share sk_i should be in [0, q)");
        }
        if (participants == null || participants.isEmpty()) {
            throw new IllegalArgumentException("Participants list should not be null or empty");
        }

        var uniqueSet = new HashSet<>(participants);

        if (uniqueSet.size() != participants.size()) {
            throw new IllegalArgumentException("Participants list should contain unique indices");
        }

        if (!uniqueSet.contains(i))
            throw new IllegalArgumentException("Participants list should contain index i");
    }
}
