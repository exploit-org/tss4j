package org.exploit.threshield.ecdsa.context.crypto;

import lombok.AllArgsConstructor;
import org.exploit.crypto.key.ECPublicKey;
import org.exploit.threshield.model.ECCurveParams;
import org.exploit.threshield.util.Polynomials;
import org.exploit.zktrust.cipher.Paillier;
import org.exploit.zktrust.cipher.key.PaillierKeyPair;
import org.exploit.zktrust.commitment.model.CommitmentResult;
import org.exploit.zktrust.proof.pallier.model.ZKSetup;

import java.math.BigInteger;
import java.util.List;
import java.util.Objects;

@AllArgsConstructor(access = lombok.AccessLevel.PRIVATE)
public class InMemoryCryptoContext implements CryptoContext {
    private final BigInteger lagrangeShare;
    private final PaillierKeyPair paillier;
    private final ECCurveParams curve;
    private final ECPublicKey publicKey;

    private CommitmentResult commitment;
    private ZKSetup zkSetup;

    @Override
    public void setCommitment(CommitmentResult commitment) {
        Objects.requireNonNull(commitment, "Commitment cannot be null");
        this.commitment = commitment;
    }

    @Override
    public boolean isInitialized() {
        return commitment != null;
    }

    @Override
    public BigInteger lagrangeShare() {
        return lagrangeShare;
    }

    @Override
    public PaillierKeyPair paillier() {
        return paillier;
    }

    @Override
    public CommitmentResult ephemeral() {
        return commitment;
    }

    @Override
    public ZKSetup zkSetup() {
        return zkSetup;
    }

    @Override
    public ECPublicKey publicKey() {
        return publicKey;
    }

    @Override
    public ECCurveParams curve() {
        return curve;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public static class Builder {
        private PaillierKeyPair paillier;
        private CommitmentResult commitment;

        private ZKSetup zkSetup;
        private ECCurveParams curve;
        private BigInteger lagrangeShare;
        private ECPublicKey publicKey;

        public Builder paillier(PaillierKeyPair paillier) {
            this.paillier = paillier;
            return this;
        }

        public Builder commitment(CommitmentResult commitment) {
            this.commitment = commitment;
            return this;
        }

        public Builder publicKey(ECPublicKey publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        public Builder zkSetup(ZKSetup zkSetup) {
            this.zkSetup = zkSetup;
            return this;
        }

        public Builder curve(ECCurveParams curve) {
            this.curve = curve;
            return this;
        }

        public Builder lagrangeShare(BigInteger lagrangeShare) {
            this.lagrangeShare = lagrangeShare;
            return this;
        }

        public Builder lagrangeShare(BigInteger ski, int idx, List<Integer> participants, BigInteger q) {
            this.lagrangeShare = Polynomials.lagrangeShare(ski, idx, participants, q);
            return this;
        }

        public InMemoryCryptoContext build() {
            if (paillier == null)
                paillier = Paillier.generateKeyPair(3072);

            if (zkSetup == null)
                zkSetup = ZKSetup.generate(2048);

            Objects.requireNonNull(publicKey, "Public key cannot be null");
            Objects.requireNonNull(zkSetup, "ZKSetup cannot be null");
            Objects.requireNonNull(curve, "Curve cannot be null");
            Objects.requireNonNull(lagrangeShare, "Lagrange share cannot be null");

            return new InMemoryCryptoContext(lagrangeShare, paillier, curve, publicKey, commitment, zkSetup);
        }
    }
}
