package org.exploit.threshield.ecdsa.context;

import lombok.AllArgsConstructor;
import lombok.RequiredArgsConstructor;
import org.exploit.threshield.ecdsa.context.crypto.CryptoContext;
import org.exploit.threshield.ecdsa.context.init.InitContext;
import org.exploit.threshield.ecdsa.context.integrity.InMemoryIntegrityContext;
import org.exploit.threshield.ecdsa.context.integrity.IntegrityContext;
import org.exploit.threshield.ecdsa.context.mta.MtAContext;
import org.exploit.threshield.ecdsa.context.mta.initiator.MtAInitiatorContext;
import org.exploit.threshield.ecdsa.context.mta.respondent.MtARespondentContext;
import org.exploit.threshield.ecdsa.context.signature.InMemorySignatureContext;
import org.exploit.threshield.ecdsa.context.signature.SignatureContext;

import java.util.Objects;

@AllArgsConstructor(access = lombok.AccessLevel.PRIVATE)
public class GG20Context {
    private final InitContext init;
    private final MtAContext mta;
    private final CryptoContext crypto;
    private final SignatureContext signature;
    private final IntegrityContext integrity;

    public InitContext init() {
        return init;
    }

    public MtAContext mta() {
        return mta;
    }

    public SignatureContext signature() {
        return signature;
    }

    public IntegrityContext integrity() {
        return integrity;
    }

    public CryptoContext crypto() {
        return crypto;
    }

    public static ContextBuilder newBuilder() {
        return new ContextBuilder();
    }

    @RequiredArgsConstructor
    public static class ContextBuilder {
        private InitContext init;
        private CryptoContext crypto;
        private MtAContext mta = new MtAContext(MtAInitiatorContext.inMemory(), MtARespondentContext.inMemory());
        private SignatureContext signature = new InMemorySignatureContext();
        private IntegrityContext integrity = new InMemoryIntegrityContext();

        public ContextBuilder init(InitContext init) {
            this.init = init;
            return this;
        }

        public ContextBuilder mta(MtAContext mta) {
            this.mta = mta;
            return this;
        }

        public ContextBuilder crypto(CryptoContext crypto) {
            this.crypto = crypto;
            return this;
        }

        public ContextBuilder signature(SignatureContext signature) {
            this.signature = signature;
            return this;
        }

        public ContextBuilder integrity(IntegrityContext integrity) {
            this.integrity = integrity;
            return this;
        }

        public GG20Context build() {
            Objects.requireNonNull(init, "InitContext cannot be null");
            Objects.requireNonNull(mta, "MtAContext cannot be null");
            Objects.requireNonNull(crypto, "CryptoContext cannot be null");

            return new GG20Context(init, mta, crypto, signature, integrity);
        }
    }
}
