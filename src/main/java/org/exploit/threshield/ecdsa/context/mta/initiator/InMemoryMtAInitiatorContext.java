package org.exploit.threshield.ecdsa.context.mta.initiator;

import org.exploit.threshield.util.Sum;
import org.exploit.zktrust.mta.model.MtAInitiatorMessage;

import java.math.BigInteger;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

public class InMemoryMtAInitiatorContext implements MtAInitiatorContext {
    private MtAInitiatorMessage message;

    private final Map<Integer, BigInteger> alphas = new ConcurrentHashMap<>();
    private final Map<Integer, BigInteger> mus = new ConcurrentHashMap<>();

    @Override
    public void setInitiatorMessage(MtAInitiatorMessage message) {
        this.message = message;
    }

    @Override
    public void storeAlpha(int peerId, BigInteger alpha) {
        alphas.put(peerId, Objects.requireNonNull(alpha));
    }

    @Override
    public void storeMu(int peerId, BigInteger mu) {
        mus.put(peerId, Objects.requireNonNull(mu));
    }

    @Override
    public BigInteger modSumAlpha(BigInteger delta, BigInteger q) {
        return Sum.modSum(delta, q, alphas.values());
    }

    @Override
    public BigInteger modSumMu(BigInteger sigma, BigInteger q) {
        return Sum.modSum(sigma, q, mus.values());
    }

    @Override
    public MtAInitiatorMessage message() {
        return Objects.requireNonNull(message, "Initiator message not set (init not called?)");
    }

    @Override
    public boolean isInitialized() {
        return message != null;
    }
}
