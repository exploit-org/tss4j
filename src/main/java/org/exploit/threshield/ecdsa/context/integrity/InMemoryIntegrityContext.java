package org.exploit.threshield.ecdsa.context.integrity;

import org.bouncycastle.math.ec.ECPoint;
import org.exploit.threshield.ecdsa.commitment.ChaumPedersonCommitment;
import org.exploit.threshield.ecdsa.commitment.ChaumPedersonCommitmentWithValue;
import org.exploit.threshield.ecdsa.commitment.GammaCommitment;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class InMemoryIntegrityContext implements IntegrityContext {
    private final Map<Integer, ChaumPedersonCommitmentWithValue> lambdas = new ConcurrentHashMap<>();
    private final Map<Integer, GammaCommitment> gammaCommits = new ConcurrentHashMap<>();
    private final Map<Integer, ChaumPedersonCommitment> sigmaCommits = new ConcurrentHashMap<>();

    @Override
    public void storeLambda(int peerId, ChaumPedersonCommitmentWithValue lambda) {
        lambdas.put(peerId, lambda);
    }

    @Override
    public void storeGammaCommitment(int peerId, GammaCommitment gammaCommitment) {
        gammaCommits.put(peerId, gammaCommitment);
    }

    @Override
    public void storeSigmaCommitment(int peerId, ChaumPedersonCommitment sigmaCommitment) {
        sigmaCommits.put(peerId, sigmaCommitment);
    }

    @Override
    public GammaCommitment getGammaCommitment(int peerId) {
        return gammaCommits.get(peerId);
    }

    @Override
    public ChaumPedersonCommitment getSigmaCommitment(int peerId) {
        return sigmaCommits.get(peerId);
    }

    @Override
    public ECPoint computeLambdaProduct(ECPoint clientLambda) {
        ECPoint result = clientLambda;

        for (var point: lambdas.values()) {
            result = result.add(point.value());
        }

        return result.normalize();
    }
}