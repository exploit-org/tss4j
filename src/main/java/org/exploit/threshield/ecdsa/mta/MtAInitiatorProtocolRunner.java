package org.exploit.threshield.ecdsa.mta;

import lombok.AllArgsConstructor;
import org.exploit.threshield.constant.GG20;
import org.exploit.threshield.ecdsa.context.GG20Context;
import org.exploit.zktrust.mta.MtAProtocol;
import org.exploit.zktrust.mta.model.MtAResult;

@AllArgsConstructor
public class MtAInitiatorProtocolRunner {
    private final MtAProtocol mta;
    private final GG20Context context;

    void generateInitiatorMessage() {
        var initiatorMessage = mta.generateInitiatorMessage(context.crypto().ephemeral().k_i(),
                context.crypto().zkSetup(), context.init().additionalContext());

        context.mta().initiator().setInitiatorMessage(initiatorMessage);
    }

    public void store(GG20.ComputationType type, int peerId, MtAResult result) {
        var zkSetup = context.crypto().zkSetup();
        var publicKey = context.crypto().paillier().publicKey();
        var cA = context.mta().initiator().message().cA();

        switch (type) {
            case GAMMA -> {
                var decrypted = mta.decryptCj(result.c_j()).mod(context.crypto().curve().q());
                context.mta().initiator().storeAlpha(peerId, decrypted);
            }
            case LAGRANGE -> {
                if (!mta.verifyRespondentProof(result, cA, publicKey, zkSetup, context.init().additionalContext()))
                    throw new SecurityException("Invalid respondent proof for " + peerId);

                var decrypted = mta.decryptCj(result.c_j()).mod(context.crypto().curve().q());
                context.mta().initiator().storeMu(peerId, decrypted);
            }
        }
    }
}
