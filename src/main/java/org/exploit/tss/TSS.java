package org.exploit.tss;

import com.sun.jna.NativeLibrary;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public final class TSS {
    private TSS() {}

    private static volatile boolean loaded;

    private static final Set<String> tempFiles = ConcurrentHashMap.newKeySet();
    private static final ExecutorService POOL = Executors.newWorkStealingPool(
            Math.max(2, Runtime.getRuntime().availableProcessors())
    );

    public static ExecutorService getPool() {
        return POOL;
    }

    public static synchronized void loadLibraries() {
        if (loaded) return;

        extractAndLoad("sodium");
        extractAndLoad("secp256k1");
        extractAndLoad("gmp");

        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            for (var p : tempFiles)
                new File(p).delete();
        }));

        loaded = true;
    }

    private static void extractAndLoad(String libBase) {
        var osTag = osTag();
        var arch = System.getProperty("os.arch");
        var mapped = System.mapLibraryName(libBase);
        var path = "natives/" + osTag + "-" + arch + "/" + mapped;

        try (var in = TSS.class.getClassLoader().getResourceAsStream(path)) {
            if (in == null)
                throw new UnsatisfiedLinkError("Bundled native not found: " + path);

            var dir = Files.createTempDirectory("jna-" + libBase + "-");
            dir.toFile().deleteOnExit();

            var so = dir.resolve(mapped);
            Files.copy(in, so, StandardCopyOption.REPLACE_EXISTING);
            so.toFile().deleteOnExit();

            NativeLibrary.addSearchPath(libBase, dir.toString());
        } catch (IOException ex) {
            throw new IllegalStateException("Failed to load native: " + libBase, ex);
        }
    }

    private static String osTag() {
        var os = System.getProperty("os.name").toLowerCase(Locale.ROOT);

        if (os.contains("mac"))
            return "macos";

        if (os.contains("win"))
            return "windows";

        return "linux";
    }
}