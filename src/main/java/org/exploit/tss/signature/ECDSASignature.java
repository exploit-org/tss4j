package org.exploit.tss.signature;

import lombok.Getter;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.DERSequence;
import org.exploit.gmp.BigInt;
import org.exploit.tss.signature.serialize.DerSerializable;

import java.io.IOException;

@Getter
public class ECDSASignature implements Signature, DerSerializable {
    private final byte[] r;
    private final byte[] s;
    private final byte recId;

    public ECDSASignature(byte[] r, byte[] s, byte recId) {
        if (r == null || r.length != 32) {
            throw new IllegalArgumentException("r must be 32 bytes long");
        }

        if (s == null || s.length != 32) {
            throw new IllegalArgumentException("s must be 32 bytes long");
        }

        if (recId < 0 || recId > 3) {
            throw new IllegalArgumentException("recId must be between 0 and 3");
        }

        this.r = r;
        this.s = s;
        this.recId = recId;
    }

    @Override
    public byte[] encode() {
        byte[] encoded = new byte[r.length + s.length + 1];

        System.arraycopy(r, 0, encoded, 0, r.length);
        System.arraycopy(s, 0, encoded, r.length, s.length);
        encoded[encoded.length - 1] = recId;

        return encoded;
    }

    @Override
    public byte[] der() {
        try {
            var v = new ASN1EncodableVector();
            v.add(new ASN1Integer(new BigInt(1, r).toJavaInt()));
            v.add(new ASN1Integer(new BigInt(1, s).toJavaInt()));

            return new DERSequence(v).getEncoded();
        } catch (IOException e) {
            throw new IllegalStateException("Unable to encode signature to DER format", e);
        }
    }
}