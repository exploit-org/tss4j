package org.exploit.tss.context;

import org.exploit.gmp.BigInt;
import org.exploit.tss.curve.EllipticCurveParams;
import org.exploit.tss.curve.PointOps;
import org.exploit.sodium.SecretBox;
import org.exploit.tss.util.Polynomials;

import javax.security.auth.Destroyable;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.function.Supplier;

public interface ShamirKeyContext<P extends PointOps<P>> extends Destroyable {
    int idx();

    SecretBox ski();

    Supplier<byte[]> memKey();

    EllipticCurveParams<P> curve();

    List<Integer> participants();

    default <T> T useSki(Function<BigInt, T> function) {
        var memKey = memKey().get();

        try {
            return ski().useDecrypted(memKey, bytes -> {
                var ski = new BigInt(1, bytes);

                try {
                    return function.apply(ski);
                } finally {
                    ski.destroy();
                }
            });
        } finally {
            Arrays.fill(memKey, (byte) 0);
        }
    }

    default <T> T useLagrangeShare(Function<BigInt, T> function) {
        return useSki(share -> {
            var lagrange = Polynomials.lagrangeShare(share, idx(), participants(), curve().getCurveOrder());

            try {
                return function.apply(lagrange);
            } finally {
                lagrange.destroy();
            }
        });
    }

    @Override
    default void destroy() {
        ski().destroy();
    }
}
