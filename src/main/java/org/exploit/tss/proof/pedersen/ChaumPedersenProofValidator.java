package org.exploit.tss.proof.pedersen;

import lombok.AllArgsConstructor;
import org.exploit.gmp.BigInt;
import org.exploit.tss.curve.ec.WeierstrassPointOps;
import org.exploit.tss.proof.ZKProofValidator;
import org.exploit.tss.proof.model.ChaumPedersenProof;
import org.exploit.tss.util.Bytes;
import org.exploit.tss.util.Hash;

@AllArgsConstructor
public class ChaumPedersenProofValidator<P extends WeierstrassPointOps<P>> implements ZKProofValidator<ChaumPedersenProof<P>, WeierstrassPointOps<P>, Void> {
    private final BigInt q;
    private final WeierstrassPointOps<P> g;
    private final WeierstrassPointOps<P> h;

    @Override
    public boolean verifyProof(ChaumPedersenProof<P> proof, WeierstrassPointOps<P> T, Void t) {
        var c = computeChallenge(T, proof.A());

        var left = g.mul(proof.r()).add(h.mul(proof.s())).normalize();
        var right = proof.A().add(T.mul(c)).normalize();

        return left.equals(right);
    }

    private BigInt computeChallenge(WeierstrassPointOps<P> T, WeierstrassPointOps<P> A) {
        var bytes = Bytes.encode(g.encode(true), h.encode(true), T.encode(true), A.encode(true));
        return new BigInt(1, Hash.sha256(bytes)).mod(q);
    }
}
