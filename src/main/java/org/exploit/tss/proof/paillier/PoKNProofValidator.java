package org.exploit.tss.proof.paillier;

import lombok.AllArgsConstructor;
import org.exploit.tss.util.Hash;
import org.exploit.gmp.BigInt;
import org.exploit.tss.pallier.key.PaillierPublicKey;
import org.exploit.tss.proof.ZKProofValidator;
import org.exploit.tss.proof.model.PoKNProof;
import org.exploit.tss.util.Bytes;

import java.util.ArrayList;
import java.util.List;

@AllArgsConstructor
public class PoKNProofValidator implements ZKProofValidator<PoKNProof, PaillierPublicKey, byte[]> {
    private static final int SMALL_PRIME_LIMIT = 65536;
    private static final int[] SMALL_PRIMES = generatePrimes(SMALL_PRIME_LIMIT);

    private static boolean hasSmallFactor(BigInt N) {
        for (int p : SMALL_PRIMES)
            if (N.mod(BigInt.valueOf(p)).signum() == 0)
                return true;
        return false;
    }

    private static int[] generatePrimes(int limit) {
        boolean[] composite = new boolean[limit + 1];
        List<Integer> list = new ArrayList<>();
        for (int i = 2; i <= limit; i++) {
            if (!composite[i]) {
                list.add(i);
                if ((long) i * i <= limit)
                    for (int j = i * i; j <= limit; j += i)
                        composite[j] = true;
            }
        }
        return list.stream().mapToInt(i -> i).toArray();
    }

    @Override
    public boolean verifyProof(PoKNProof proof, PaillierPublicKey pk, byte[] context) {
        var N = pk.n();

        if (N.bitLength() < 2048 || hasSmallFactor(N))
            return false;

        var nsq = pk.nsquare();
        var g = pk.g();

        var commit = new BigInt(proof.commit());
        var s = new BigInt(proof.s());

        var hashInput = Bytes.encode(
                N.toByteArray(),
                commit.toByteArray(),
                context != null ? context : new byte[0]
        );

        var c = new BigInt(1, Hash.sha256(hashInput)).mod(N);

        var left = s.modPow(N, nsq);
        var right = commit.multiply(g.modPow(c.multiply(N), nsq)).mod(nsq);

        return left.equals(right);
    }
}