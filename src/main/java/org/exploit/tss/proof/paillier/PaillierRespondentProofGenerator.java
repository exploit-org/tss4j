package org.exploit.tss.proof.paillier;

import org.exploit.gmp.BigInt;
import org.exploit.tss.TSS;
import org.exploit.tss.proof.ZKProofGenerator;
import org.exploit.tss.proof.model.PaillierRespondentProof;
import org.exploit.tss.proof.model.witness.PaillierRespondentEncryptionWitness;
import org.exploit.tss.util.Bytes;
import org.exploit.tss.util.Hash;
import org.exploit.tss.util.ZKRandom;

import java.util.Objects;

import static org.exploit.tss.util.BigIntUtils.randomZnStar;

public class PaillierRespondentProofGenerator implements ZKProofGenerator<PaillierRespondentProof, PaillierRespondentEncryptionWitness, byte[]> {
    @Override
    public PaillierRespondentProof createProof(PaillierRespondentEncryptionWitness witness, byte[] context) {
        Objects.requireNonNull(witness, "witness");

        var pubKey = witness.publicKey();
        var zkSetup = witness.zk();

        var n = pubKey.n();
        var nsq = pubKey.nsquare();

        var hatN = zkSetup.hatN();
        var h1 = zkSetup.h1();
        var h2 = zkSetup.h2();

        var q = witness.q();
        var q2 = q.pow(2);
        var q6 = q.pow(6);
        var hatNq = q.multiply(hatN);

        var rnd = ZKRandom.getRandom();

        var alpha = randomZnStar(q2, rnd);
        var beta = randomZnStar(n, rnd);
        var gamma = randomZnStar(q6, rnd);
        var rho = randomZnStar(hatNq, rnd);
        var sigma = randomZnStar(hatNq, rnd);
        var tau = randomZnStar(q6, rnd);

        var gPowGamma = onePlusN(gamma, n, nsq);

        var betaPowN = TSS.getPool().submit(() -> beta.modPow(n, nsq));
        var ciPowAlpha = TSS.getPool().submit(() -> witness.c_i().modPowSec(alpha, nsq));

        var h1b = TSS.getPool().submit(() -> h1.modPowSec(witness.b(), hatN));
        var h2rho = TSS.getPool().submit(() -> h2.modPowSec(rho, hatN));

        var h1alpha = TSS.getPool().submit(() -> h1.modPowSec(alpha, hatN));
        var h2sigma = TSS.getPool().submit(() -> h2.modPowSec(sigma, hatN));

        var h2tau = TSS.getPool().submit(() -> h2.modPowSec(tau, hatN));
        var h1y = TSS.getPool().submit(() -> h1.modPowSec(witness.y(), hatN));
        var h1gamma = TSS.getPool().submit(() -> h1.modPowSec(gamma, hatN));

        BigInt z, zPrime, t, v, w;

        try {
            z = h1b.get().multiply(h2rho.get()).mod(hatN);
            zPrime = h1alpha.get().multiply(h2sigma.get()).mod(hatN);

            var h2Tau = h2tau.get();
            t = h1y.get().multiply(h2Tau).mod(hatN);

            v = ciPowAlpha.get().multiply(gPowGamma).mod(nsq);
            v = v.multiply(betaPowN.get()).mod(nsq);

            w = h1gamma.get().multiply(h2Tau).mod(hatN);
        } catch (Exception e) {
            throw new IllegalStateException("respondent proof parallel step failed", e);
        }

        var ctx = (context == null) ? new byte[0] : context;

        var hashInput = Bytes.encode(
                witness.c_i().toByteArray(),
                witness.c_j().toByteArray(),
                z.toByteArray(),
                zPrime.toByteArray(),
                t.toByteArray(),
                v.toByteArray(),
                w.toByteArray(),
                ctx
        );
        var e = new BigInt(1, Hash.sha256(hashInput)).mod(q);

        var s1 = e.multiplySec(witness.b()).add(alpha);
        var s2 = e.multiplySec(rho).add(sigma);
        var t1 = e.multiplySec(witness.y()).add(gamma);
        var t2 = e.multiplySec(tau).add(tau);

        var s = witness.r().modPowSec(e, n).multiply(beta).mod(n);

        return new PaillierRespondentProof(
                z.toByteArray(),
                zPrime.toByteArray(),
                t.toByteArray(),
                v.toByteArray(),
                w.toByteArray(),
                s.toByteArray(),
                s1, s2,
                t1, t2
        );
    }

    private static BigInt onePlusN(BigInt k, BigInt n, BigInt nsq) {
        return BigInt.ONE.add(n.multiply(k)).mod(nsq);
    }
}