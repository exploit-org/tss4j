package org.exploit.tss.proof.paillier;

import lombok.AllArgsConstructor;
import org.exploit.tss.util.Hash;
import org.exploit.gmp.BigInt;
import org.exploit.tss.pallier.key.PaillierPrivateKey;
import org.exploit.tss.proof.ZKProofGenerator;
import org.exploit.tss.proof.model.PoKNProof;
import org.exploit.tss.util.Bytes;
import org.exploit.tss.util.ZKRandom;

import static org.exploit.tss.util.BigIntUtils.randomZnStar;

@AllArgsConstructor
public class PoKNProofGenerator implements ZKProofGenerator<PoKNProof, PaillierPrivateKey, byte[]> {
    @Override
    public PoKNProof createProof(PaillierPrivateKey priv, byte[] context) {
        var pk = priv.publicKey();
        var N = pk.n();
        var nsq = pk.nsquare();
        var g = pk.g();
        var rnd = ZKRandom.getRandom();

        var r = randomZnStar(nsq, rnd);

        var commit = r.modPow(N, nsq);

        var hashInput = Bytes.encode(
                N.toByteArray(),
                commit.toByteArray(),
                context != null ? context : new byte[0]
        );

        var c = new BigInt(1, Hash.sha256(hashInput)).mod(N);

        var s = r.multiplySec(g.modPow(c, nsq)).mod(nsq);

        return new PoKNProof(commit.toByteArray(), s.toByteArray());
    }
}