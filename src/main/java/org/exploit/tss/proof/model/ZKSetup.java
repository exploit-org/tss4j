package org.exploit.tss.proof.model;

import org.exploit.gmp.BigInt;
import org.exploit.gmp.util.PrimeNumberGenerator;
import org.exploit.tss.util.ZKRandom;

public record ZKSetup(BigInt hatN, BigInt h1, BigInt h2) {
    public static ZKSetup generate(int bitLength) {
        var blumPair = PrimeNumberGenerator.generateBlumPair(bitLength);
        var p = blumPair.p();
        var q = blumPair.q();

        var hatN = p.multiply(q);

        var h1 = sampleUnit(hatN, ZKRandom.getRandom());
        BigInt h2;

        do {
            h2 = sampleUnit(hatN, ZKRandom.getRandom());
        } while (h2.equals(h1));

        h1 = h1.modPow(BigInt.TWO, hatN);
        h2 = h2.modPow(BigInt.TWO, hatN);

        p.destroy();
        q.destroy();

        return new ZKSetup(hatN, h1, h2);
    }

    private static BigInt sampleUnit(BigInt hatN, java.util.Random rnd) {
        BigInt u;
        do {
            u = new BigInt(hatN.bitLength(), rnd).mod(hatN);
        } while (
                u.signum() == 0 || u.equals(BigInt.ONE) || u.equals(hatN.subtract(BigInt.ONE)) | !u.gcd(hatN).equals(BigInt.ONE)
        );
        return u;
    }
}