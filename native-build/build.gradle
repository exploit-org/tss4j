plugins {
    id 'java'
    id 'java-library'
}

apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'tech.yanand.maven-central-publish'

group = 'org.exploit.tss'
version = '1.0.0'

ext {
    projectName = "TSS4J Native Bundle"
    projectDescription = "Native libraries for TSS4J, including secp256k1, sodium, and GMP"
}

def os= org.gradle.internal.os.OperatingSystem.current()

def osTag = os.isMacOsX() ? 'macos' : os.isWindows() ? 'windows' : 'linux'
def arch = System.getProperty('os.arch')
def ext = os.isMacOsX() ? 'dylib' : os.isWindows() ? 'dll' : 'so'

def cpus = Runtime.runtime.availableProcessors()

def inc = { String libname ->
    switch (osTag) {
        case "macos":
            return ["${libname}.*.${ext}"]
        case "linux":
            return ["${libname}.${ext}.*"]
        case "windows":
            return ["${libname}.${ext}"]
        default:
            throw new GradleException("Unsupported platform: $osTag")
    }
}

def exc = { String libname ->
    switch (osTag) {
        case "macos":
        case "linux":
            return ["${libname}.${ext}"]
        case "windows":
            return []
        default:
            throw new GradleException("Unsupported platform: $osTag")
    }
}

def buildSecp = tasks.register('buildSecp256k1') {
    doLast {
        exec {
            commandLine 'bash', '-c', """
                set -e
                cd $rootDir/native/libsecp256k1

                [ -f Makefile ] && make distclean || true
                git clean -xdf
                
                ./autogen.sh
                ./configure --enable-experimental \
                             --enable-module-extrakeys \
                             --enable-module-schnorrsig \
                             --enable-module-recovery \
                             --enable-shared \
                             --disable-static
                make -j${cpus}
            """
        }
    }
}

def buildSodium = tasks.register('buildSodium') {
    doLast {
        exec {
            commandLine 'bash', '-c', """
                set -e
                cd $rootDir/native/libsodium

                [ -f Makefile ] && make distclean || true
                git clean -xdf

                ./autogen.sh

                ./configure --enable-shared --disable-static --disable-minimal --with-pic
                make -j${Runtime.runtime.availableProcessors()}
            """
        }
    }
}

def gmpFlags = [
        '--enable-shared',
        '--disable-static',
        '--enable-fat'
].findAll { it }.join(' ')

def buildGmp = tasks.register('buildGmp') {
    doLast {
        exec {
            commandLine 'bash', '-c', """
              set -e
              cd $rootDir/native/libgmp
              [ -f Makefile ] && make distclean || true
              git clean -xdf
              ./configure ${gmpFlags}
              make -j${cpus}
            """
        }
    }
}

def nativesDir = "$buildDir/natives/natives/${osTag}-${arch}"

tasks.register('assembleNatives', Copy) {
    dependsOn buildSodium, buildSecp, buildGmp
    into(nativesDir)

    from("$rootDir/native/libsodium/src/libsodium/.libs") {
        include inc("libsodium")
        exclude exc("libsodium")
        rename { _ -> "libsodium.${ext}" }
    }

    from("$rootDir/native/libsecp256k1/.libs") {
        include inc("libsecp256k1")
        exclude exc("libsecp256k1")
        rename { _ -> "libsecp256k1.${ext}" }
    }

    from("$rootDir/native/libgmp/.libs") {
        include inc("libgmp")
        exclude exc("libgmp")
        rename { _ -> "libgmp.${ext}" }
    }
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

gradle.taskGraph.whenReady { graph ->
    if (!gradle.startParameter.taskNames.any { it.startsWith(":native-build") }) {
        tasks.matching { it.name in [
                "publish",
                "publishToMavenCentralPortal",
                "zipBundleForUpload",
                "publishNativeBundlePublicationToMavenCentralRepository"
        ] }.configureEach {
            enabled = false
        }
    }
}

jar {
    dependsOn 'assembleNatives'
    archiveBaseName.set('tss4j-natives')
    archiveClassifier.set("${osTag}-${arch}-${version}")
    into("natives/${osTag}-${arch}") { from(nativesDir) }
}