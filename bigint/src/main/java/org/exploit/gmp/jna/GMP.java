package org.exploit.gmp.jna;

import com.sun.jna.*;
import com.sun.jna.ptr.IntByReference;

import java.util.Arrays;
import java.util.List;

public interface GMP extends Library {
    GMP INSTANCE = Native.load(Platform.isWindows() ? "gmp-10" : "gmp", GMP.class);

    class mpz_t extends Structure implements Structure.ByReference {
        public int _mp_alloc, _mp_size;
        public Pointer _mp_d;

        @Override
        protected List<String> getFieldOrder() {
            return Arrays.asList("_mp_alloc","_mp_size","_mp_d");
        }
    }

    void __gmpz_powm(mpz_t rop, mpz_t base, mpz_t exp, mpz_t mod);

    int __gmpz_fdiv_ui(mpz_t rop, long op2);

    void __gmpz_set_ui(mpz_t rop, long op);
    void __gmpz_setbit(mpz_t rop, long bit_index);
    void __gmpz_add_ui(mpz_t rop, mpz_t op, long op2);

    void __gmpz_and(mpz_t rop, mpz_t op1, mpz_t op2);

    int __gmpz_jacobi(mpz_t a, mpz_t b);

    void __gmpz_init(mpz_t x);
    void __gmpz_clear(mpz_t x);

    void __gmpz_import(mpz_t rop, NativeLong count, int order, NativeLong size, int endian, NativeLong nails, Pointer op);

    Pointer __gmpz_export(Pointer rop, IntByReference countp, int order, int size, int endian, int nails, mpz_t op);

    void __gmpz_nextprime(mpz_t rop, mpz_t op);

    int  __gmpz_sizeinbase(mpz_t op, int base);

    int  __gmpz_probab_prime_p(mpz_t op, int reps);

    int  __gmpz_invert (mpz_t rop, mpz_t op, mpz_t mod);

    void __gmpz_gcd (mpz_t rop, mpz_t a, mpz_t b);

    void __gmpz_set(mpz_t rop, mpz_t op);
    void __gmpz_set_si(mpz_t rop, long op);

    int __gmpz_set_str(mpz_t rop, String str, int base);

    int __gmpz_tstbit(mpz_t op, long bit_index);

    void __gmpz_sub_ui(mpz_t rop, mpz_t op, long op2);

    void __gmpz_mul_2exp(mpz_t rop, mpz_t op, long exp);
    void __gmpz_fdiv_q_2exp(mpz_t q, mpz_t n, long exp);

    void __gmpz_add(mpz_t rop, mpz_t op1, mpz_t op2);
    void __gmpz_sub(mpz_t rop, mpz_t op1, mpz_t op2);

    void __gmpz_mul(mpz_t rop, mpz_t op1, mpz_t op2);
    void __gmpz_tdiv_q(mpz_t q, mpz_t n, mpz_t d);

    void __gmpz_tdiv_r(mpz_t r, mpz_t n, mpz_t d);
    void __gmpz_pow_ui(mpz_t rop, mpz_t base, long exp);

    void __gmpz_mod(mpz_t r, mpz_t n, mpz_t d);

    int __gmpz_cmp(mpz_t op1, mpz_t op2);
    int __gmpz_cmp_ui(mpz_t op1, long op2);

    int mpz_sgn(mpz_t op);

    Pointer __gmpz_get_str(Pointer str, int base, mpz_t op);

    int __gmpz_cmp_si(mpz_t op1, long op2);

    void __gmpz_neg(mpz_t rop, mpz_t op);
    void __gmpz_abs(mpz_t rop, mpz_t op);

    void __gmpz_powm_sec(mpz_t rop, mpz_t base, mpz_t exp, mpz_t mod);

    void __gmpn_sec_mul(Pointer rp, Pointer up, long un,
                        Pointer vp, long vn, Pointer wp);

    void __gmpn_sec_sqr(Pointer rp, Pointer up, long un, Pointer wp);

    long __gmpn_sec_add_1(Pointer rp, Pointer up, long un, long c_in, Pointer tp);

    long __gmpn_sec_sub_1(Pointer rp, Pointer up, long un, long c_in, Pointer tp);
}