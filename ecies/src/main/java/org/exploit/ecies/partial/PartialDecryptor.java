package org.exploit.ecies.partial;

import org.exploit.ecies.model.CipherText;
import org.exploit.ecies.model.PartialDecrypt;
import org.exploit.tss.context.ShamirKeyContext;
import org.exploit.tss.curve.ec.WeierstrassPointOps;
import org.exploit.tss.proof.dleq.DleqProofGenerator;
import org.exploit.tss.proof.model.context.DleqContext;

public class PartialDecryptor<P extends WeierstrassPointOps<P>> {
    private final ShamirKeyContext<P> keyCtx;
    private final DleqProofGenerator<P> proofGen;

    public PartialDecryptor(ShamirKeyContext<P> keyCtx) {
        this.keyCtx = keyCtx;

        var curve = keyCtx.curve();
        //noinspection unchecked
        this.proofGen = new DleqProofGenerator<>(curve.getCurveOrder(), (P) curve.getG());
    }

    public PartialDecrypt<P> partialDecrypt(CipherText ct) {
        var curve = keyCtx.curve();
        var R = (P) curve.decodePoint(ct.getR());

        return keyCtx.useSki(share -> {
            var Yi = (P) curve.getG().mul(share).normalize();
            var di = (P) R.mul(share).normalize();

            var ctx = new DleqContext<>(R, Yi, di);
            var proof = proofGen.createProof(share, ctx);

            return new PartialDecrypt<>(keyCtx.idx(), di.encode(true), Yi, proof);
        });
    }
}
