package org.exploit.ecies;

import org.exploit.ecies.cipher.SymmetricCipher;
import org.exploit.ecies.context.ECIESContext;
import org.exploit.ecies.kem.ElGamalKEM;
import org.exploit.ecies.partial.PartialDecryptCombiner;
import org.exploit.ecies.partial.PartialDecryptor;
import org.exploit.tss.curve.ec.WeierstrassPointOps;

import javax.security.auth.Destroyable;

public class ThresholdECIESClient<P extends WeierstrassPointOps<P>> implements Destroyable {
    private final ECIESContext<P> context;

    private final ElGamalKEM<P> encryptor;
    private final PartialDecryptor<P> decryptor;
    private final PartialDecryptCombiner<P> combiner;

    public ThresholdECIESClient(ECIESContext<P> context, SymmetricCipher cipher) {
        this.context = context;

        this.encryptor = new ElGamalKEM<>(cipher, context);
        this.decryptor = new PartialDecryptor<>(context.crypto());
        this.combiner = new PartialDecryptCombiner<>(this, cipher);
    }

    public ECIESContext<P> context() {
        return context;
    }

    public ElGamalKEM<P> encryptor() {
        return encryptor;
    }

    public PartialDecryptor<P> decryptor() {
        return decryptor;
    }

    public PartialDecryptCombiner<P> combiner() {
        return combiner;
    }

    @Override
    public void destroy() {
        context.crypto().destroy();
    }
}
