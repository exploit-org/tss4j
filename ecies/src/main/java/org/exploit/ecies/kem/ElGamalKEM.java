package org.exploit.ecies.kem;

import lombok.AllArgsConstructor;
import org.exploit.ecies.cipher.SymmetricCipher;
import org.exploit.ecies.context.ECIESContext;
import org.exploit.ecies.model.CipherText;
import org.exploit.gmp.BigInt;
import org.exploit.tss.curve.ec.WeierstrassPointOps;
import org.exploit.tss.util.ZKRandom;

import java.util.Arrays;

import static org.exploit.ecies.util.HKDF.hkdf;

@AllArgsConstructor
public class ElGamalKEM<P extends WeierstrassPointOps<P>> {
    private final SymmetricCipher cipher;
    private final ECIESContext<P> context;

    public CipherText encrypt(byte[] msg) {
        var curve = context.crypto().curve();
        var pubKey = context.crypto().Y();

        var q = curve.getCurveOrder();

        var r = new BigInt(q.bitLength(), ZKRandom.getRandom()).mod(q);
        var R = curve.getG().mul(r);
        var S = pubKey.mul(r);

        var key = hkdf(S.encode(true), R.encode(true));
        var kEnc = Arrays.copyOfRange(key, 0, 32);
        var iv = Arrays.copyOfRange(key, 32, 32 + 12);

        try {
            var enc = cipher.encrypt(kEnc, iv, msg, R.encode(true));
            return new CipherText(R.encode(true), enc.getC(), enc.getTag());
        } finally {
            Arrays.fill(key, (byte) 0);
            Arrays.fill(kEnc, (byte) 0);
        }
    }
}
