package org.exploit.ecies.cipher;

import org.exploit.ecies.model.EncryptionResult;
import org.exploit.tss.util.Bytes;

import javax.crypto.Cipher;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Arrays;

public class AesGcmCipher implements SymmetricCipher {
    @Override
    public EncryptionResult encrypt(byte[] key, byte[] iv, byte[] msg, byte[] aad) {
        try {
            var cipher = Cipher.getInstance("AES/GCM/NoPadding");
            var spec = new GCMParameterSpec(128, iv);

            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, "AES"), spec);
            cipher.updateAAD(aad);

            var enc = cipher.doFinal(msg);
            return new EncryptionResult(Arrays.copyOf(enc, enc.length - 16),
                    Arrays.copyOfRange(enc, enc.length - 16, enc.length));
        } catch (Exception e) {
            throw new IllegalStateException(e);
        }
    }

    @Override
    public byte[] decrypt(byte[] key, byte[] iv, byte[] c, byte[] tag, byte[] aad) {
        try {
            var cipher = Cipher.getInstance("AES/GCM/NoPadding");
            var spec = new GCMParameterSpec(128, iv);

            cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, "AES"), spec);
            cipher.updateAAD(aad);

            var full = Bytes.concat(c, tag);
            return cipher.doFinal(full);
        } catch (Exception e) {
            throw new IllegalStateException(e);
        }
    }
}
